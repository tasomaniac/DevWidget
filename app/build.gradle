plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC8"
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.novoda.android-command'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.novoda.static-analysis'
if (isPlay) {
    apply plugin: 'io.fabric'
    apply plugin: 'com.github.triplet.play'
}

buildProperties {
    signing.using(file('props/release.signing')) | file('props/debug.signing')
    secrets.using(file('props/secrets.properties'))
}

def secrets = buildProperties.secrets
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        applicationId "com.tasomaniac.devwidget"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName
        buildConfigField 'String', 'GIT_SHA', "\"${gitSha}\""

        resConfigs 'en'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug.storeFile file('props/debug.keystore')
        release {
            def signing = buildProperties.signing
            storeFile file("props/${signing['storeFile'].string}")
            storePassword signing['storePassword'].string
            keyAlias signing['keyAlias'].string
            keyPassword signing['keyPassword'].string
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions 'store'
    productFlavors {
        floss {
            applicationIdSuffix '.floss'
            versionNameSuffix '-floss'
        }
        play {}
    }
}

staticAnalysis {
    penalty {
        maxWarnings = 10
        maxErrors = 0
    }

    detekt {
        profile('main') {
            config = 'props/detekt.yml'
            output = 'build/reports'
        }
    }

    lintOptions {
        textReport true
        textOutput 'stdout'

        checkAllWarnings true
        checkReleaseBuilds false

        lintConfig file('props/lint.xml')

        includeVariants { it.name == 'flossDebug' }
    }
}

androidExtensions {
    experimental true
}

if (isPlay) {
    play {
        serviceAccountEmail = secrets['play_service_account'].or('').string
        pk12File = file(secrets['play_key_file'].or('no_file.p12').string)
        track = 'alpha'
    }
}

dependencies {
    playImplementation 'com.crashlytics.sdk.android:crashlytics:2.9.4'
    playImplementation "com.google.firebase:firebase-core:16.0.1"

    implementation 'com.github.spotbugs:spotbugs:3.1.6'
    implementation 'androidx.core:core-ktx:1.0.0-beta01'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"

    implementation "com.android.support:support-fragment:$versions.supportLib"
    implementation "com.android.support:appcompat-v7:$versions.supportLib"
    implementation "com.android.support:cardview-v7:$versions.supportLib"
    implementation "com.android.support:recyclerview-v7:$versions.supportLib"
    implementation "com.android.support:design:$versions.supportLib"
    implementation "com.android.support:preference-v14:$versions.supportLib"
    implementation 'com.android.support.constraint:constraint-layout:2.0.0-alpha1'

    implementation "android.arch.lifecycle:extensions:$versions.arch"
    kapt "android.arch.lifecycle:compiler:$versions.arch"

    implementation "android.arch.persistence.room:runtime:$versions.room"
    implementation "android.arch.persistence.room:rxjava2:$versions.room"
    kapt "android.arch.persistence.room:compiler:$versions.room"

    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.17'
    implementation 'com.jakewharton.rx2:replaying-share-kotlin:2.0.1'
    implementation 'com.uber.autodispose:autodispose-kotlin:0.8.0'
    implementation 'com.uber.autodispose:autodispose-android-archcomponents:0.8.0'

    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.20.1'
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation "android.arch.persistence.room:testing:$versions.room"
}

if (isPlay) {
    apply plugin: 'com.google.gms.google-services'
}
